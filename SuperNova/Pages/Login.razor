@page "/Login"

@if (ShowRegistrationPage)
{
    <Register BackToLoginEvent="BackToLoginAction" />
}
else
{
    <div>
        <h3>Login</h3>
        <hr />
        Login Id
        <br />
        <input type="text" @bind="login.LoginId" class="form-control w-100" />
        <br />
        Password
        <br />
        <input type="password" @bind="login.Password" class="form-control w-100" />
        <hr />
        <button @onclick="LoginAction" class="btn btn-primary">Login</button>
        <button @onclick="RegisterAction" class="btn btn-success">Register</button>
    </div>
}

@if (IsValidToken == false)
{
    <hr />
    <p class="alert alert-danger">Invalid Username or Password</p>
}


@code {

    private Models.Login login;
    private LoginService loginService;
    private bool? IsValidToken = null;
    private bool ShowRegistrationPage = false;


    [Parameter]
    public EventCallback<Models.Login> AuthenitcationEvent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        login = new Models.Login();
        loginService = new LoginService();
    }

    private async Task LoginAction()
    {
        var authLogin = await loginService.SetAuthenticationToken(login);
        IsValidToken = authLogin == null ? false : true;
        if (IsValidToken == true)
        {
            await AuthenitcationEvent.InvokeAsync(authLogin);
        }
    }

    private async Task RegisterAction()
    {
        ShowRegistrationPage = true;
    }

    private async Task BackToLoginAction()
    {
        ShowRegistrationPage = false;
    }
}
